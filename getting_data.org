# -**- eval: org-toggle-inline-images: 1 -**-
#+Title: Getting Eurostat data on health and mortality
#+Author: Jan Boone@@latex:\thanks{Tilburg University, Department of Economics, Tilec and CEPR, E-mail: \textit{j.boone@uvt.nl}.}@@
#+PROPERTY: header-args  :session geopandas :kernel python3 :async yes
# kernel can be geo_env or python3

#+LANGUAGE: en
#+INFOJS_OPT: toc:1 ltoc:1 mouse:underline path:http://orgmode.org/org-info.js
#+LaTeX_CLASS: article-12
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: toc:nil timestamp:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t
#+HTML_HEAD: <link rel="stylesheet" href="./latex-css/style.css">
#+HTML_HEAD: <link rel="stylesheet" href="https://latex.now.sh/prism/prism.css">
#+HTML_HEAD: <script src="https://cdn.jsdelivr.net/npm/prismjs/prism.min.js"></script>


# this file must exist be a path or exist in `org-cite-csl-styles-dir': # apa-5th-edition.csl
#+csl-style: chicago-author-date-16th-edition.csl

# this must be a locales file in `org-cite-csl-locales-dir'. Defaults to en-US
#+csl-locale: en-US

* code to export to html :noexport:

#+BEGIN_SRC emacs-lisp :results silent
(setq org-export-with-broken-links t)

(require 'org-ref-refproc)
(let ((org-export-before-parsing-hook '(;;org-ref-cite-natmove ;; do this first
                    org-ref-csl-preprocess-buffer
                    org-ref-refproc)))
  (org-open-file (org-html-export-to-html)))
#+END_SRC

* Introduction

This file describes how we get the data for our project on [[./index.org][the health effects of demand side cost sharing]].

In this file we explain how we get the data and from where and at the same time we generate the data. By generating the data in this way, a change in the data by Eurostat will lead to (slightly) different results.

- Overview of data available at the region level: https://ec.europa.eu/eurostat/web/regions/background
- Link to excel file with overview: http://ec.europa.eu/eurostat/documents/140934/4381644/Regional-statistics-overview.xlsx





* Preamble code

Run this code first before running the code of particular data sets. It imports the relevant libraries.

#+begin_src jupyter-python
import numpy as np
import pandas as pd
from country_codes import oecd_dictionary, eurostat_dictionary
import eurostat
import xarray as xr
import matplotlib.pyplot as plt

EU_countries = ['Belgium', 'Bulgaria', 'Czechia', 'Denmark',
'Germany (until 1990 former territory of the FRG)', 'Germany','Estonia',
'Ireland', 'Greece', 'Spain', 'France', 'Croatia', 'Italy',
'Cyprus', 'Latvia', 'Lithuania', 'Luxembourg', 'Hungary', 'Malta',
'Netherlands', 'Austria', 'Poland', 'Portugal', 'Romania',
'Slovenia', 'Slovakia', 'Finland', 'Sweden', 'United Kingdom',
'Iceland', 'Liechtenstein', 'Norway', 'Switzerland',
'Bosnia and Herzegovina']

#+end_src

#+RESULTS:

* Combining data

The sections below generate the datasets per variable. The code in this section merges all these variables into one =.csv= file.

** nuts2 data

In this subsection, we merge the data at the NUTS 2 level.

#+begin_src jupyter-python :display plain

from glob import glob
ds_2 = xr.merge([xr.open_dataset(f) for f in glob('./data/*.nc')])
ds_2

#+end_src

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:                          (age: 100, nuts2: 307, sex: 2, year: 31)
Coordinates:
  ,* age                              (age) float64 1.0 2.0 3.0 ... 99.0 100.0
  ,* nuts2                            (nuts2) object 'AL01' 'AL02' ... 'UKN0'
  ,* year                             (year) int64 1990 1991 1992 ... 2019 2020
  ,* sex                              (sex) object 'F' 'M'
Data variables:
    population                       (nuts2, year, sex, age) float64 nan ... nan
    at risk of poverty               (nuts2, year) float64 nan nan ... nan nan
    lagged_mortality                 (year, age, nuts2, sex) float64 nan ... nan
    percentage_material_deprivation  (nuts2, year) float64 nan nan ... nan nan
    deaths                           (nuts2, year, sex, age) float64 nan ... nan
    FEAR                             (nuts2, year) float64 nan nan ... nan nan
    HOPING                           (nuts2, year) float64 nan nan ... nan nan
    TOOEXP                           (nuts2, year) float64 nan nan ... nan nan
    TOOFAR                           (nuts2, year) float64 nan nan ... nan nan
    WAITING                          (nuts2, year) float64 nan nan ... nan nan
#+end_example

#+begin_src jupyter-python :display plain
df = ds_2.to_dataframe()
df.reset_index(inplace=True)
df.rename({'level_0':'age','level_1':'nuts2','level_3':'year'},axis=1,inplace=True)
df['country_code'] = df['nuts2'].str.slice(0,2)
df['nuts1'] = df['nuts2'].str.slice(0,3)
df['country'] = df['country_code'].replace(eurostat_dictionary)
df.head()
#+end_src

#+RESULTS:
#+begin_example
   age nuts2 sex  year  population  at risk of poverty  lagged_mortality  \
0  1.0  AL01   F  1990         NaN                 NaN               NaN   
1  1.0  AL01   F  1991         NaN                 NaN               NaN   
2  1.0  AL01   F  1992         NaN                 NaN               NaN   
3  1.0  AL01   F  1993         NaN                 NaN               NaN   
4  1.0  AL01   F  1994         NaN                 NaN               NaN   

   percentage_material_deprivation  deaths  FEAR  HOPING  TOOEXP  TOOFAR  \
0                              NaN     NaN   NaN     NaN     NaN     NaN   
1                              NaN     NaN   NaN     NaN     NaN     NaN   
2                              NaN     NaN   NaN     NaN     NaN     NaN   
3                              NaN     NaN   NaN     NaN     NaN     NaN   
4                              NaN     NaN   NaN     NaN     NaN     NaN   

   WAITING country_code nuts1  country  
0      NaN           AL   AL0  Albania  
1      NaN           AL   AL0  Albania  
2      NaN           AL   AL0  Albania  
3      NaN           AL   AL0  Albania  
4      NaN           AL   AL0  Albania  
#+end_example

** country data

In this section, we add country level variables to the dataframe.

#+begin_src jupyter-python :display plain

from glob import glob
ds_c = xr.merge([xr.open_dataset(f) for f in glob('./data/country/*.nc')])
ds_c

#+end_src

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:                        (country: 33, country_code: 33, year: 28)
Coordinates:
  ,* year                           (year) int64 1992 1993 1994 ... 2018 2019
  ,* country                        (country) object 'Austria' ... 'United Kin...
  ,* country_code                   (country_code) object 'AT' 'BA' ... 'SK' 'UK'
Data variables:
    HF2_PC_CHE                     (country, country_code, year) float64 nan ...
    HF2_PPS_HAB                    (country, country_code, year) float64 nan ...
    HF3_PC_CHE                     (country, country_code, year) float64 nan ...
    HF3_PPS_HAB                    (country, country_code, year) float64 nan ...
    health expenditure per capita  (country, country_code, year) float64 ...
#+end_example

#+begin_src jupyter-python :display plain
df_country = ds_c.to_dataframe()
df_country.reset_index(inplace=True)
df_country.rename({'level_0':'country','level_1':'country_code','level_2':'year'},axis=1,inplace=True)
df_country.head()
#+end_src

#+RESULTS:
#+begin_example
   country country_code  year  HF2_PC_CHE  HF2_PPS_HAB  HF3_PC_CHE  \
0  Austria           AT  1992         NaN          NaN         NaN   
1  Austria           AT  1993         NaN          NaN         NaN   
2  Austria           AT  1994         NaN          NaN         NaN   
3  Austria           AT  1995         NaN          NaN         NaN   
4  Austria           AT  1996         NaN          NaN         NaN   

   HF3_PPS_HAB  health expenditure per capita  
0          NaN                            NaN  
1          NaN                            NaN  
2          NaN                            NaN  
3          NaN                            NaN  
4          NaN                            NaN  
#+end_example


#+begin_src jupyter-python :display plain
df = df.merge(df_country, how = 'left', on = ['country','year','country_code'])

df = df[(df.population >= df.deaths) & (df.population > 0)] # drop rows where deaths > population at Jan. 1st (e.g. because people moved in the year)
df['mortality'] = df.deaths/df.population

df.head()
#+end_src

#+RESULTS:
#+begin_example
     age nuts2 sex  year  population  at risk of poverty  lagged_mortality  \
186  1.0  AT11   F  1990      1345.0                 NaN               NaN   
187  1.0  AT11   F  1991      1371.0                 NaN               NaN   
188  1.0  AT11   F  1992      1436.0                 NaN               NaN   
189  1.0  AT11   F  1993      1372.0                 NaN               NaN   
190  1.0  AT11   F  1994      1349.0                 NaN               NaN   

     percentage_material_deprivation  deaths  FEAR  ...  WAITING  \
186                              NaN     0.0   NaN  ...      NaN   
187                              NaN     0.0   NaN  ...      NaN   
188                              NaN     1.0   NaN  ...      NaN   
189                              NaN     0.0   NaN  ...      NaN   
190                              NaN     1.0   NaN  ...      NaN   

     country_code  nuts1  country HF2_PC_CHE HF2_PPS_HAB HF3_PC_CHE  \
186            AT    AT1  Austria        NaN         NaN        NaN   
187            AT    AT1  Austria        NaN         NaN        NaN   
188            AT    AT1  Austria        NaN         NaN        NaN   
189            AT    AT1  Austria        NaN         NaN        NaN   
190            AT    AT1  Austria        NaN         NaN        NaN   

     HF3_PPS_HAB  health expenditure per capita  mortality  
186          NaN                            NaN   0.000000  
187          NaN                            NaN   0.000000  
188          NaN                            NaN   0.000696  
189          NaN                            NaN   0.000000  
190          NaN                            NaN   0.000741  

[5 rows x 23 columns]
#+end_example

Finally, we save the merged NUTS 2 and country data into a =.csv= file.

#+begin_src jupyter-python :display plain
df.to_csv('./data/data_deaths_by_age_nuts_2.csv')
#+end_src

#+RESULTS:

* Data

First, we fetch the variables at the country level from the Eurostat website. Then we move to the NUTS 2 regional data.

** country data

*** OOP per country

We want a measure of "how generous" a healthcare system is in terms of oop-payments. This feature of the healthcare system tends to be defined at the country level. We use household oop payment and expenditure on voluntary payment schemes (for things that are not covered by basic or mandatory insurance).

- link to data: https://ec.europa.eu/eurostat/databrowser/view/hlth_sha11_hf/default/table?lang=en

| abbreviation | name                                                       |
|--------------+------------------------------------------------------------|
| HF2          | Voluntary health care payment schemes                      |
| HF3          | Household out-of-pocket payment                            |
| PC_CHE       | Percentual share of total current health expenditure (CHE) |
| PPS_HAB      | Purchasing power standard (PPS) per inhabitant             |


#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_sha11_hf')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country_code'] = [x[:2] for x in df['geo']]
df['country'] = df['country_code'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries)  & (df.icha11_hf.isin(["HF2", "HF3"])) & (df.unit.isin([ 'PC_CHE','PPS_HAB']))]
df.drop(["geo"],axis=1,inplace=True)

df = pd.melt(df,id_vars=['country','country_code','unit','icha11_hf'],
                        value_vars=np.arange(1992,2019),
                        var_name='year',value_name='health_expenditure')
df.set_index(['country','country_code','year','unit','icha11_hf'],inplace=True)
df = df.unstack()
df.columns = df.columns.droplevel()
df = df.unstack()
df.columns = df.columns.droplevel()
df.columns = ['HF2_PC_CHE','HF2_PPS_HAB','HF3_PC_CHE','HF3_PPS_HAB']
df.reset_index(inplace=True)
df.set_index(['country','country_code','year'],inplace=True)
df.tail()
#+end_src

#+RESULTS:
#+begin_example
                                  HF2_PC_CHE  HF2_PPS_HAB  HF3_PC_CHE  \
country        country_code year
United Kingdom UK           2014        5.40       155.48       15.16
                            2015        5.40       161.07       15.23
                            2016        5.04       148.46       15.37
                            2017        5.41       160.78       15.72
                            2018        5.62       172.06       15.88

                                  HF3_PPS_HAB
country        country_code year
United Kingdom UK           2014       436.73
                            2015       454.78
                            2016       453.16
                            2017       467.53
                            2018       486.25
#+end_example

#+begin_src jupyter-python :display plain
ds = df.to_xarray()
ds.to_netcdf("./data/country/out_of_pocket.nc")
ds
#+end_src

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:       (country: 33, country_code: 33, year: 27)
Coordinates:
  ,* country       (country) object 'Austria' 'Belgium' ... 'United Kingdom'
  ,* country_code  (country_code) object 'AT' 'BA' 'BE' 'BG' ... 'SI' 'SK' 'UK'
  ,* year          (year) int64 1992 1993 1994 1995 1996 ... 2015 2016 2017 2018
Data variables:
    HF2_PC_CHE    (country, country_code, year) float64 nan nan ... 5.41 5.62
    HF2_PPS_HAB   (country, country_code, year) float64 nan nan ... 160.8 172.1
    HF3_PC_CHE    (country, country_code, year) float64 nan nan ... 15.72 15.88
    HF3_PPS_HAB   (country, country_code, year) float64 nan nan ... 467.5 486.2
#+end_example




*** healthcare expenditure

- link to date: https://ec.europa.eu/eurostat/databrowser/view/hlth_sha11_hc/default/table?lang=en

| abbreviation | variable name                         |
|--------------+---------------------------------------|
| TOT_HC       | Current health care expenditure (CHE) |
| EUR_HAB      | Euro per inhabitant                   |


#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_sha11_hc')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
df['country_code'] = [x[:2] for x in df['geo']]
df['country'] = df['country_code'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries)  & (df.icha11_hc.isin(["TOT_HC"])) & (df.unit.isin(['EUR_HAB']))]
df.drop(["geo"],axis=1,inplace=True)

df = pd.melt(df,id_vars=['country','country_code','unit','icha11_hc'],
                        value_vars=np.arange(1992,2020),
                        var_name='year',value_name='health_expenditure')
df.set_index(['country','country_code','year','unit','icha11_hc'],inplace=True)
df = df.unstack()
df.columns = df.columns.droplevel()
df = df.unstack()
df.columns = df.columns.droplevel()
df.reset_index(inplace=True)
# df.columns = ['HF2_PC_CHE','HF2_PPS_HAB','HF3_PC_CHE','HF3_PPS_HAB']
df.rename({'EUR_HAB':'health expenditure per capita'},axis=1,inplace=True)
# df.reset_index(inplace=True)
df.set_index(['country','country_code','year'],inplace=True)
df.head()
#+end_src

#+RESULTS:
: unit                       health expenditure per capita
: country country_code year
: Austria AT           1992                            NaN
:                      1993                            NaN
:                      1994                            NaN
:                      1995                            NaN
:                      1996                            NaN


#+begin_src jupyter-python :display plain
ds = df.to_xarray()
ds.to_netcdf("./data/country/healthcare_expenditure.nc")
ds
#+end_src

#+RESULTS:
: <xarray.Dataset>
: Dimensions:                        (country: 33, country_code: 33, year: 28)
: Coordinates:
:   * country                        (country) object 'Austria' ... 'United Kin...
:   * country_code                   (country_code) object 'AT' 'BA' ... 'SK' 'UK'
:   * year                           (year) int64 1992 1993 1994 ... 2018 2019
: Data variables:
:     health expenditure per capita  (country, country_code, year) float64 nan ...



** nuts 2


- overview of regional data: https://ec.europa.eu/eurostat/web/regions/data/database

*** crude number of deaths and population by age and sex


- population: https://ec.europa.eu/eurostat/databrowser/view/demo_r_d2jan/default/table?lang=en


#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('demo_r_d2jan')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
age_range = ['Y1', 'Y10', 'Y11', 'Y12', 'Y13', 'Y14', 'Y15',
       'Y16', 'Y17', 'Y18', 'Y19', 'Y2', 'Y20', 'Y21', 'Y22', 'Y23',
       'Y24', 'Y25', 'Y26', 'Y27', 'Y28', 'Y29', 'Y3', 'Y30', 'Y31',
       'Y32', 'Y33', 'Y34', 'Y35', 'Y36', 'Y37', 'Y38', 'Y39', 'Y4',
       'Y40', 'Y41', 'Y42', 'Y43', 'Y44', 'Y45', 'Y46', 'Y47', 'Y48',
       'Y49', 'Y5', 'Y50', 'Y51', 'Y52', 'Y53', 'Y54', 'Y55', 'Y56',
       'Y57', 'Y58', 'Y59', 'Y6', 'Y60', 'Y61', 'Y62', 'Y63', 'Y64',
       'Y65', 'Y66', 'Y67', 'Y68', 'Y69', 'Y7', 'Y70', 'Y71', 'Y72',
       'Y73', 'Y74', 'Y75', 'Y76', 'Y77', 'Y78', 'Y79', 'Y8', 'Y80',
       'Y81', 'Y82', 'Y83', 'Y84', 'Y85', 'Y86', 'Y87', 'Y88', 'Y89',
       'Y9', 'Y90', 'Y91', 'Y92', 'Y93', 'Y94', 'Y95', 'Y96', 'Y97',
       'Y98', 'Y99']
df['country_code'] = [x[:2] for x in df['geo']]
df['country'] = df['country_code'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries) & (df.sex.isin(["M","F"])) & (df.age.isin(age_range))]
df.drop(['country','country_code'],axis=1,inplace=True)
df = pd.melt(df,id_vars=['geo','sex','age'],
                        value_vars=np.arange(1990,2021),
                        var_name='year',value_name='population')
df['nuts'] = [len(x)-2 for x in df.geo]
df = df.query('nuts == 2')
df.drop('nuts',inplace=True, axis=1)
df.rename({'geo':'nuts2', 'age':'age string'},axis=1,inplace=True)
df['age'] = [float(x.replace('Y','')) for x in df['age string']]
df.drop('age string',inplace=True, axis=1)

df.set_index(['nuts2','year','sex','age'],inplace=True)

df.head()
#+end_src

#+RESULTS:
#+begin_example
     unit sex age   geo     2020     2019     2018     2017     2016     2015  \
1021   NR   F  Y1    AT  42255.0  42850.0  43340.0  41498.0  40860.0  39284.0
1022   NR   F  Y1   AT1  18442.0  18677.0  19094.0  18108.0  17897.0  17148.0
1023   NR   F  Y1  AT11   1172.0   1158.0   1163.0   1142.0   1106.0   1096.0
1024   NR   F  Y1  AT12   7587.0   7623.0   7752.0   7367.0   7402.0   7148.0
1025   NR   F  Y1  AT13   9683.0   9896.0  10179.0   9599.0   9389.0   8904.0

      ...     1999     1998     1997     1996     1995     1994     1993  \
1021  ...  41388.0  43312.0  43299.0  45079.0  46320.0  46324.0  46573.0
1022  ...  16281.0  16937.0  17000.0  17574.0  18228.0  18038.0  18327.0
1023  ...   1219.0   1275.0   1311.0   1325.0   1422.0   1349.0   1372.0
1024  ...   7703.0   8088.0   8107.0   8459.0   8775.0   8556.0   8883.0
1025  ...   7359.0   7574.0   7582.0   7790.0   8031.0   8133.0   8072.0

         1992     1991     1990
1021  45035.0  43825.0  43094.0
1022  17499.0  17038.0  16623.0
1023   1436.0   1371.0   1345.0
1024   8412.0   8234.0   8038.0
1025   7651.0   7433.0   7240.0

[5 rows x 35 columns]
#+end_example



#+begin_src jupyter-python :display plain
ds = df.to_xarray()
ds.to_netcdf("./data/population_nuts_2.nc")
ds
#+end_src

#+RESULTS:
: <xarray.Dataset>
: Dimensions:     (age: 99, nuts2: 299, sex: 2, year: 31)
: Coordinates:
:   * nuts2       (nuts2) object 'AT11' 'AT12' 'AT13' ... 'UKM8' 'UKM9' 'UKN0'
:   * year        (year) int64 1990 1991 1992 1993 1994 ... 2017 2018 2019 2020
:   * sex         (sex) object 'F' 'M'
:   * age         (age) float64 1.0 2.0 3.0 4.0 5.0 ... 95.0 96.0 97.0 98.0 99.0
: Data variables:
:     population  (nuts2, year, sex, age) float64 1.345e+03 1.349e+03 ... nan nan



- deaths: https://ec.europa.eu/eurostat/databrowser/view/demo_r_magec/default/table?lang=en


#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('demo_r_magec')
df.rename({'geo\\time':'geo'},inplace=True,axis=1)
age_range = ['Y1', 'Y10', 'Y11', 'Y12', 'Y13', 'Y14', 'Y15',
       'Y16', 'Y17', 'Y18', 'Y19', 'Y2', 'Y20', 'Y21', 'Y22', 'Y23',
       'Y24', 'Y25', 'Y26', 'Y27', 'Y28', 'Y29', 'Y3', 'Y30', 'Y31',
       'Y32', 'Y33', 'Y34', 'Y35', 'Y36', 'Y37', 'Y38', 'Y39', 'Y4',
       'Y40', 'Y41', 'Y42', 'Y43', 'Y44', 'Y45', 'Y46', 'Y47', 'Y48',
       'Y49', 'Y5', 'Y50', 'Y51', 'Y52', 'Y53', 'Y54', 'Y55', 'Y56',
       'Y57', 'Y58', 'Y59', 'Y6', 'Y60', 'Y61', 'Y62', 'Y63', 'Y64',
       'Y65', 'Y66', 'Y67', 'Y68', 'Y69', 'Y7', 'Y70', 'Y71', 'Y72',
       'Y73', 'Y74', 'Y75', 'Y76', 'Y77', 'Y78', 'Y79', 'Y8', 'Y80',
       'Y81', 'Y82', 'Y83', 'Y84', 'Y85', 'Y86', 'Y87', 'Y88', 'Y89',
       'Y9', 'Y90', 'Y91', 'Y92', 'Y93', 'Y94', 'Y95', 'Y96', 'Y97',
       'Y98', 'Y99']
df['country_code'] = [x[:2] for x in df['geo']]
df['country'] = df['country_code'].replace(eurostat_dictionary)
df = df[df.country.isin(EU_countries) & (df.sex.isin(["M","F"])) & (df.age.isin(age_range))]
df.drop(['country','country_code'],axis=1,inplace=True)
df = pd.melt(df,id_vars=['geo','sex','age'],
                        value_vars=np.arange(1990,2020),
                        var_name='year',value_name='deaths')
df['nuts'] = [len(x)-2 for x in df.geo]
df = df.query('nuts == 2')
df.drop('nuts',inplace=True, axis=1)
df.rename({'geo':'nuts2', 'age':'age string'},axis=1,inplace=True)
df['age'] = [float(x.replace('Y','')) for x in df['age string']]
df.drop('age string',inplace=True, axis=1)

df.set_index(['nuts2','year','sex','age'],inplace=True)

df.head()
#+end_src

#+RESULTS:
#+begin_example
     unit sex age   geo  2019  2018  2017  2016  2015  2014  ...  1999  1998  \
1021   NR   F  Y1    AT  11.0   9.0   7.0  11.0   7.0   6.0  ...  14.0  16.0
1022   NR   F  Y1   AT1   2.0   6.0   2.0   3.0   4.0   4.0  ...   3.0   8.0
1023   NR   F  Y1  AT11   0.0   2.0   0.0   0.0   0.0   0.0  ...   0.0   0.0
1024   NR   F  Y1  AT12   2.0   1.0   1.0   1.0   1.0   2.0  ...   2.0   5.0
1025   NR   F  Y1  AT13   0.0   3.0   1.0   2.0   3.0   2.0  ...   1.0   3.0

      1997  1996  1995  1994  1993  1992  1991  1990
1021  17.0  15.0  16.0  23.0  30.0  26.0  23.0  29.0
1022   4.0   4.0   NaN  13.0  12.0  11.0   7.0  11.0
1023   0.0   0.0   NaN   1.0   0.0   1.0   0.0   0.0
1024   3.0   1.0   NaN   5.0   3.0   5.0   1.0   7.0
1025   1.0   3.0   NaN   7.0   9.0   5.0   6.0   4.0

[5 rows x 34 columns]
#+end_example



#+begin_src jupyter-python :display plain
ds = df.to_xarray()
ds.to_netcdf("./data/deaths_nuts_2.nc")
ds
#+end_src

#+RESULTS:
: <xarray.Dataset>
: Dimensions:  (age: 99, nuts2: 299, sex: 2, year: 30)
: Coordinates:
:   * nuts2    (nuts2) object 'AT11' 'AT12' 'AT13' 'AT21' ... 'UKM8' 'UKM9' 'UKN0'
:   * year     (year) int64 1990 1991 1992 1993 1994 ... 2015 2016 2017 2018 2019
:   * sex      (sex) object 'F' 'M'
:   * age      (age) float64 1.0 2.0 3.0 4.0 5.0 6.0 ... 95.0 96.0 97.0 98.0 99.0
: Data variables:
:     deaths   (nuts2, year, sex, age) float64 0.0 0.0 1.0 1.0 ... nan nan nan nan


*** mortality lagged per age

- useful link to lag variables in a pandas dataframe: https://stackoverflow.com/questions/61234837/pandas-panel-data-shifting-values-by-two-taking-into-consideration-year-gaps

#+begin_src jupyter-python :display plain

ds_population = xr.open_dataset('./data/population_nuts_2.nc')
ds_deaths =  xr.open_dataset('./data/deaths_nuts_2.nc')

ds_mortality = xr.merge([ds_population, ds_deaths])
ds_mortality
#+end_src

#+RESULTS:
: <xarray.Dataset>
: Dimensions:     (age: 99, nuts2: 299, sex: 2, year: 31)
: Coordinates:
:   * year        (year) int64 1990 1991 1992 1993 1994 ... 2017 2018 2019 2020
:   * nuts2       (nuts2) object 'AT11' 'AT12' 'AT13' ... 'UKM8' 'UKM9' 'UKN0'
:   * sex         (sex) object 'F' 'M'
:   * age         (age) float64 1.0 2.0 3.0 4.0 5.0 ... 95.0 96.0 97.0 98.0 99.0
: Data variables:
:     population  (nuts2, year, sex, age) float64 ...
:     deaths      (nuts2, year, sex, age) float64 0.0 0.0 1.0 1.0 ... nan nan nan




#+begin_src jupyter-python
df_mortality = ds_mortality.to_dataframe()
df_mortality = df_mortality[(df_mortality.population >= df_mortality.deaths) & (df_mortality.population > 0)] # drop rows where deaths > population at Jan. 1st (e.g. because people moved in the year)
df_mortality['mortality'] = df_mortality['deaths']/df_mortality['population']
df_mortality.reset_index(inplace=True)
df_mortality.rename({'level_3':'year'},inplace=True,axis=1)
df_mortality['year'] = pd.to_datetime(df_mortality['year'],format='%Y')
df_mortality.head()
#+end_src

#+RESULTS:
:    age nuts2 sex       year  population  deaths  mortality
: 0  1.0  AT11   F 1990-01-01      1345.0     0.0   0.000000
: 1  1.0  AT11   F 1991-01-01      1371.0     0.0   0.000000
: 2  1.0  AT11   F 1992-01-01      1436.0     1.0   0.000696
: 3  1.0  AT11   F 1993-01-01      1372.0     0.0   0.000000
: 4  1.0  AT11   F 1994-01-01      1349.0     1.0   0.000741

#+begin_src jupyter-python
new_column = (df_mortality.set_index(['year','age','nuts2','sex']).groupby(['age','nuts2','sex'])['mortality']
                .shift(1)).to_frame()
new_column.reset_index(inplace=True)
new_column.age += 1
new_column['year'] = new_column['year'].dt.year
new_column.rename({'mortality':'lagged_mortality'},inplace=True,axis=1)
##log_odds???
new_column.set_index(['year','age','nuts2','sex'],inplace=True)
new_column.head()
#+end_src

#+RESULTS:
:                     lagged_mortality
: year age nuts2 sex
: 1990 2.0 AT11  F                 NaN
: 1991 2.0 AT11  F            0.000000
: 1992 2.0 AT11  F            0.000000
: 1993 2.0 AT11  F            0.000696
: 1994 2.0 AT11  F            0.000000

#+begin_src jupyter-python :display plain
ds = new_column.to_xarray()
ds.to_netcdf("./data/lagged_mortality_nuts_2.nc")
ds
#+end_src

#+RESULTS:
: <xarray.Dataset>
: Dimensions:           (age: 99, nuts2: 297, sex: 2, year: 30)
: Coordinates:
:   * year              (year) int64 1990 1991 1992 1993 ... 2016 2017 2018 2019
:   * age               (age) float64 2.0 3.0 4.0 5.0 6.0 ... 97.0 98.0 99.0 100.0
:   * nuts2             (nuts2) object 'AT11' 'AT12' 'AT13' ... 'UKM9' 'UKN0'
:   * sex               (sex) object 'F' 'M'
: Data variables:
:     lagged_mortality  (year, age, nuts2, sex) float64 nan nan nan ... nan nan



*** Poverty measures


**** Severe material deprivation rate by NUTS 2 regions [TGS00104]

- link to the data: https://ec.europa.eu/eurostat/databrowser/view/tgs00104/default/table?lang=en

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('tgs00104')
df.rename({'geo\\time':'nuts2'},inplace=True,axis=1)
df = df[(df.unit == "PC")]
df.drop(["unit"],axis=1,inplace=True)
df['nuts'] = [len(x)-2 for x in df.nuts2]
df = df[df.nuts == 2]
df.drop('nuts',axis=1,inplace=True)

df = pd.melt(df,id_vars=['nuts2'],
                        value_vars=np.arange(2009,2021),
                        var_name='year',value_name='percentage_material_deprivation')
df.set_index(['nuts2','year'],inplace=True)
df.head()

#+end_src

#+RESULTS:
#+begin_example
  nuts2  2009  2010  2011  2012  2013  2014  2015  2016  2017  2018  2019  \
0  AL01   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  46.5  38.6  38.5
1  AL02   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  41.0  40.4  37.7
2  AL03   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  36.4  35.3  34.9
3  AT11   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN
4  AT12   NaN   NaN   NaN   NaN   NaN   2.7   2.1   2.2   1.9   2.1   NaN

   2020
0   NaN
1   NaN
2   NaN
3   NaN
4   NaN
#+end_example


#+begin_src jupyter-python
ds_material_deprivation = df.to_xarray()
ds_material_deprivation.to_netcdf("./data/material_deprivation_nuts_2.nc")
ds_material_deprivation
#+end_src

#+RESULTS:
: <xarray.Dataset>
: Dimensions:                          (nuts2: 179, year: 12)
: Coordinates:
:   * nuts2                            (nuts2) object 'AL01' 'AL02' ... 'SK04'
:   * year                             (year) int64 2009 2010 2011 ... 2019 2020
: Data variables:
:     percentage_material_deprivation  (nuts2, year) float64 nan nan ... 9.6 8.3

**** At-risk-of-poverty rate by NUTS 2 regions [TGS00103]

- link to the data: https://ec.europa.eu/eurostat/databrowser/view/tgs00103/default/table?lang=en


#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('tgs00103')
df.rename({'geo\\time':'nuts2'},inplace=True,axis=1)
df = df[(df.unit == "PC_POP")]
df.drop(["unit"],axis=1,inplace=True)
df['nuts'] = [len(x)-2 for x in df.nuts2]
df = df[df.nuts == 2]
df.drop('nuts',axis=1,inplace=True)

df = pd.melt(df,id_vars=['nuts2'],
                        value_vars=np.arange(2009,2021),
                        var_name='year',value_name='at risk of poverty')
df.set_index(['nuts2','year'],inplace=True)
df.head()

#+end_src

#+RESULTS:
#+begin_example
  nuts2  2009  2010  2011  2012  2013  2014  2015  2016  2017  2018  2019  \
0  AL01   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  25.6  25.1  25.9
1  AL02   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  20.8  23.6  22.7
2  AL03   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  25.6  21.6  20.8
3  BG31  32.9  30.5  31.4  29.4  27.4  27.0  30.4  32.1  32.8  35.1  31.7
4  BG32  27.8  28.8  28.0  23.6  17.9  21.2  19.3  24.0  24.0  20.8  23.7

   2020
0   NaN
1   NaN
2   NaN
3  34.9
4  24.0
#+end_example


#+begin_src jupyter-python
ds_at_risk_of_poverty = df.to_xarray()
ds_at_risk_of_poverty.to_netcdf("./data/at_risk_of_poverty_nuts_2.nc")
ds_at_risk_of_poverty
#+end_src

#+RESULTS:
: <xarray.Dataset>
: Dimensions:             (nuts2: 170, year: 12)
: Coordinates:
:   * nuts2               (nuts2) object 'AL01' 'AL02' 'AL03' ... 'SK03' 'SK04'
:   * year                (year) int64 2009 2010 2011 2012 ... 2017 2018 2019 2020
: Data variables:
:     at risk of poverty  (nuts2, year) float64 nan nan nan nan ... 17.1 17.0 16.5

*** unmet needs

Self-reported unmet needs for medical examination by main reason declared and NUTS 2 regions

- link to the data: https://ec.europa.eu/eurostat/databrowser/view/hlth_silc_08_r/default/table?lang=en

| value    |                                                         |
|----------+---------------------------------------------------------|
| TOOEXP   | Too expensive                                           |
| TOOFAR   | Too far to travel                                       |
| TOOEFW   | Too expensive or too far to travel or waiting list      |
| NOTIME   | No time                                                 |
| NO_UNMET | No unmet needs to declare                               |
| NOKNOW   | Didn't know any good doctor or specialist               |
| WAITING  | Waiting list                                            |
| FEAR     | Fear of doctor, hospital, examination or treatment      |
| HOPING   | Wanted to wait and see if problem got better on its own |
| OTH      | Other                                                   |

#+begin_src jupyter-python :display plain
df = eurostat.get_data_df('hlth_silc_08_r')
df.rename({'geo\\time':'nuts2'},inplace=True,axis=1)
df.drop(["unit"],axis=1,inplace=True)
df['nuts'] = [len(x)-2 for x in df.nuts2]
df = df[df.nuts == 2]
df.drop('nuts',axis=1,inplace=True)
df=df[df.reason.isin(['FEAR','TOOEXP','TOOFAR','WAITING','HOPING', 'NOTIME', 'NO_UNMET','NOKNOW', 'OTH'])]
df = pd.melt(df,id_vars=['nuts2','reason'],
                        value_vars=np.arange(2009,2021),
                        var_name='year',value_name='unmet needs')
df.set_index(['nuts2','year','reason'],inplace=True)

df = df.unstack()
df.columns = df.columns.droplevel()
df.tail()

#+end_src

#+RESULTS:
#+begin_example
reason      FEAR  HOPING  NOKNOW  NOTIME  NO_UNMET  OTH  TOOEXP  TOOFAR  \
nuts2 year                                                                
SK04  2016   0.5     2.4     0.4     1.6      91.9  0.7     0.5     0.2   
      2017   0.2     1.3     0.5     1.4      94.1  0.4     0.2     0.3   
      2018   0.6     1.7     0.5     1.2      93.7  0.3     0.4     0.1   
      2019   0.6     1.5     0.4     1.7      93.1  0.3     0.4     0.1   
      2020   0.8     1.2     0.7     1.2      92.4  1.5     0.2     0.1   

reason      WAITING  
nuts2 year           
SK04  2016      1.8  
      2017      1.6  
      2018      1.7  
      2019      1.9  
      2020      1.8  
#+end_example


#+begin_src jupyter-python
ds_unmet_needs = df.to_xarray()
ds_unmet_needs.to_netcdf("./data/unmet_needs_nuts_2.nc")
ds_unmet_needs
#+end_src

#+RESULTS:
#+begin_example
<xarray.Dataset>
Dimensions:  (nuts2: 103, year: 12)
Coordinates:
  ,* nuts2    (nuts2) object 'AL01' 'AL02' 'AL03' 'BG31' ... 'SK02' 'SK03' 'SK04'
  ,* year     (year) int64 2009 2010 2011 2012 2013 ... 2016 2017 2018 2019 2020
Data variables:
    FEAR     (nuts2, year) float64 nan nan nan nan nan ... 0.5 0.2 0.6 0.6 0.8
    HOPING   (nuts2, year) float64 nan nan nan nan nan ... 2.4 1.3 1.7 1.5 1.2
    TOOEXP   (nuts2, year) float64 nan nan nan nan nan ... 0.5 0.2 0.4 0.4 0.2
    TOOFAR   (nuts2, year) float64 nan nan nan nan nan ... 0.2 0.3 0.1 0.1 0.1
    WAITING  (nuts2, year) float64 nan nan nan nan nan ... 1.8 1.6 1.7 1.9 1.8
#+end_example


